package com.heso.transaction.outer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Node;

import com.heso.data.TransDataProcess;
import com.heso.service.article.ArticleService;
import com.heso.service.article.entity.ArticleAndvideoREturnObject;
import com.heso.service.article.entity.ArticleCommentDTO;
import com.heso.service.mall.MallService;
import com.heso.service.mall.entity.MallServiceReturnObject;
import com.heso.service.mall.entity.MemberProduct;
import com.heso.service.order.consume.ConsumeOrder;
import com.heso.service.order.consume.entity.ConsumeOrderReturnObject;
import com.heso.service.wardrobe.WardrobeService;
import com.heso.service.wardrobe.entity.TripsuitDTO;
import com.heso.service.wardrobe.entity.WardrobeServiceReturnObject;
import com.heso.transaction.AbstractInterfaceClass;
/**
 * 查询专家课程
 * @author Administrator
 *
 */
public class Transaction_001094 extends AbstractInterfaceClass {
	private static final Log logger = LogFactory.getLog(Transaction_001910.class);
	@Override
	public String execute(Node xmlBody, String IPAddress) {
		// TODO Auto-generated method stub
		try{   
			//获取数据
 			//String amount = xmlBody.selectSingleNode("account").getText();
			String designerId = xmlBody.selectSingleNode("designerId").getText();
			 
 		//	String wardrobeId = xmlBody.selectSingleNode("wardrobeId").getText();
 			//String orderId = xmlBody.selectSingleNode("orderId").getText();
			//String desc = xmlBody.selectSingleNode("desc").getText();
			//判断token
			 
			
			//返回数据
			StringBuffer sb = new StringBuffer();
			ArticleAndvideoREturnObject aavro = new ArticleService().getVideo(designerId);
			if(aavro.getCode().equals("000000")){
				for(ArticleCommentDTO dto:aavro.getAcDtoList()){
					sb.append("<videoItem>");
					sb.append("<designerName>"+dto.getDesignerName()+"</designerName>");
					sb.append("<id>"+dto.getvideoId()+"</id>");
					sb.append("<videonName>"+dto.getvideonName()+"</videonName>");
					sb.append("<videoSrc>"+dto.getvideoSrc()+"</videoSrc>");
					sb.append("<like>"+dto.getLike()+"</like>");
					sb.append("<videoLength>"+dto.getvideoLength()+"</videoLength>");
					sb.append("<videoImage>"+dto.getvideoImage()+"</videoImage>");
					sb.append("<image>"+dto.getImage()+"</image>");
					sb.append("<createTime>"+dto.getDcreateTime()+"</createTime>");
					sb.append("</videoItem>");
				}
				 
			}
			String xmlBodyStr = super.buildResp("000000", sb.toString());
			return xmlBodyStr;
		}catch(Exception e){
			e.printStackTrace();
		}
		return super.ERROR_RETURN;
	}
	public static void main(String[] args) {
		StringBuffer sb = new StringBuffer();
		sb.append("<?xml version='1.0' encoding='utf-8'?>");
		sb.append("<message>");
		sb.append("<head>");
		sb.append("<type>001094</type>");
		sb.append("<messageId>1</messageId>");
		sb.append("<agentId>001</agentId>");
		sb.append("<digest>MD5数字签名</digest>");
		sb.append("</head>");
		sb.append("<body>");
		sb.append("<designerId>1111111</designerId>");
		sb.append("<account>0000000000000016</account>");
		sb.append("<token>0</token>");	
		sb.append("</body>");
		sb.append("</message>");
		try {
			new TransDataProcess().execute(sb.toString());
			System.out.println(">>>>>>>>>>>>>>gg");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
